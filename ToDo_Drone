 
- forcast wave 0.5 to 1.0 sec 
- substract wave from ship position so that descent line is not moving by the waves
- plot ship movement in 2d plot
- 

- get a dataset from a real ship with IMU
- kan basis-gps van drone ook worden ingesteld in paparazzi als secondary gps?


- bebop GPS take-over als backup

ToDo list drone:
+ Make Matlab autosave figures after analisys
+ Add dotted lines in Matlab to show when approach_moving_target is enabled
+ Make every gps-fix save the TOW as timestamp, to make the feedforward accurate with drone and groundstation
? Try to make an all-purpose XML file with IF statements (tried, but without success)
? Add Uplink messages also to logfiles
- make set_target_offset_here() work in flightplan
- find better name for force_forward variable
- make drone software robust for GPS disconnection mid-flight
- test Set_offset_here (function did not seem to work in the field)
- mangage logfiles (store them in folders)
- Improve Matlab analisys somehow to show tracking error more clear
- Break harder in guidance_indi when in front of WP (prevent crash into truck/ship cabin)
- Check if bebop speed is completely dependend of guidance_indi, or are there maybe other modules forcing the drone to move?
- Make RTK system in drone robust to loss of RTCM messages
- Add info to internal logging on drone (logging declared in airframe)
- Analyse what factors cause overshoot of WP in guidance (control params/gps-noise/abrubpt-speedchange)
- Plan how to make dataset with gyro/accelerometer at rough sea somehow
- Is there a Derrivative in guidance_indi?
- Only use sonar when drone is sure it is above the deck/truck
- Define better what happens when approach_moving_target_enable() is stoped
- Make sure that guidance_indi/approach does not go des_pos, except when needed
- Make position controller with different gains for forward/sideways position control
- Make position filter with different dapmping for forward/sideways position ship
- Find what max frequency external gps bebop can be
- Determine what best gps frequency ship is
- implement px4 autopilot in GPS-groundstation
~ Filter ship gps position based on heading/cog (filter roll, but not froward movement)
~ Filter/smooth signal inside GPS module (watch out for inducing delays)
~ Make some kind of pathplanner that knows how to fly when you know a desired landing position at a specific TOW

ToDo list ground station:
+ connect Pixhawk to ground station battery
+ connect Pixhawk to ground station GPS
+ connect Pixhawk to XBee Telemetry
+ make paparazzi configuration for groundstation
	+ fake/no RC included
	+ flightplan
	+ airframe
	+ telemetry
	+ Session
+ make empty flightplan for groundstation (maybe add some function later)
- make airframe for groundstation
	- use internal pixhawk imu
	- use NO magnetometer
	- use gps bar instead of magnetometer
	+ send telemetry via XBee
	- choose best state estimator for ship
	- 
- 3D print box for pixhawk to mount it on the bar
- install pixhawk in box on bar with all cables cleaned up
- let pixhawk log IMU data on the SD card
- try to analyse some log data from the SD card in Matlab
~ add function to flightplan; send_data_to_drone() after gps_init()



- = TODO
~ = TODO later
+ = DONE
? = TRIED, but failed

Specific aproach_ship test after failed testflight at valkenburg 27-10-2022
+ position ground-gps (red dot) in GCS at right place (also move to see if red dot is moving)
+ position target_pos at right place in GCS (according to values in target_pos module)
+ position des_pos at right place in GCS (according to values in approach module)
+ GCS waypoints moving when rotating ground-gps (also when approach_enable function is not used)
+ Drone rel_despos is correct with static placement of drone wrt ground-gps (see if de relative distances are logic)
+ Drone rel_targetpos is correct with static placement of drone wrt ground-gps (see if de relative distances are logic)
+ Drone des_vel/des_accel in approach module logic with relative distance rel_despos
+ Check ALL altitudes with static placement drone and ground-gps
+ Check if approach_enable function still works as it should (WP_approach moves to WP_ship)

- Speed SP not stopping when target_pos timeout
- bug WP_approach stoped updating (gcs shows it at WP_HOME)
- bug rel_refpos NAN when drone on top of it



Factors causing overshoot WP:
- gcs no gps-pos update send, but target changed heading/speed
- amt.relvel_gain (approach speed gain) higher than 1.0
- amt.speed_gain (target speed gain) higher than 1.0
- amt.pos_gain (position error gain) too high, so the drone does not slow down early enough
- integration_compensation (if used) because set to 0.0 when passing error=0, but at that point speed is too high
- drone is on WP and ship/truck descellerates (drone always beyond WP in this case)


code to test:
  float ship_rotation = RadOfDeg(target_heading); 
  float offset_centerline_ship = rel_target_pos.x * cosf(ship_rotation) - rel_target_pos.y * sinf(ship_rotation);
  float behind_ship            = rel_target_pos.x * sinf(ship_rotation) + rel_target_pos.y * cosf(ship_rotation);

  printf("ship_rotation: %f \t offset_centerline %f \t behind_ship %f \n", ship_rotation, offset_centerline_ship, behind_ship);


