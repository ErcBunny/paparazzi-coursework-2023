ifndef OPTIM
	OPTIM = "-O0 -fno-loop-optimize -fno-aggressive-loop-optimizations"
endif
ifndef DEBUG
	DEBUG = -g
endif
ifndef WARN_FLAGS
	WARN_FLAGS = "-Wall -W -Wwrite-strings -Winline -Wstrict-prototypes -Wnested-externs -Wpointer-arith -Wcast-align -Wcast-qual -Wshadow"
endif


CC = gcc
AR = ar
ARFLAGS = ruvs
PRODUCT = qr.a
BIN_DIR = ./bin

OBJECTS = solveActiveSet.o qr_solve/qr_solve.o qr_solve/r8lib_min.o qr_wrapper.o qr_updates.o

MATLAB_INCLUDES = /mnt/ArchRoot/opt/MATLAB/R2021b/extern/include
#INCLUDE_FLAGS = -I../common -I$(MATLAB_INCLUDES)
INCLUDE_FLAGS = -I../common -I./lib/qr_solve
LINK_FLAGS = -lm

CC_FLAGS = -fstack-usage -Werror=vla -fwrapv -fPIC -c $(WARN_FLAGS) $(DEBUG) $(OPTIM)

all : $(PRODUCT)

$(PRODUCT) : $(OBJECTS)
	cd $(BIN_DIR) && $(AR) $(ARFLAGS) $(PRODUCT) $(OBJECTS)

solveActiveSet.o : lib/solveActiveSet.c
	@mkdir -p $(BIN_DIR)/$(dir $@)
	$(CC) $(CC_FLAGS) -o $(BIN_DIR)/$@ $< $(INCLUDE_FLAGS) $(LINK_FLAGS)

qr_solve/qr_solve.o : lib/qr_solve/qr_solve.c  # automate this somehow?
	@mkdir -p $(BIN_DIR)/$(dir $@)
	$(CC) $(CC_FLAGS) -o $(BIN_DIR)/$@ $< $(INCLUDE_FLAGS) $(LINK_FLAGS)

qr_solve/r8lib_min.o : lib/qr_solve/r8lib_min.c
	@mkdir -p $(BIN_DIR)/$(dir $@)
	$(CC) $(CC_FLAGS) -o $(BIN_DIR)/$@ $< $(INCLUDE_FLAGS) $(LINK_FLAGS)

qr_wrapper.o : lib/qr_wrapper.c
	@mkdir -p $(BIN_DIR)/$(dir $@)
	$(CC) $(CC_FLAGS) -o $(BIN_DIR)/$@ $< $(INCLUDE_FLAGS) $(LINK_FLAGS)

qr_updates.o : lib/qr_updates.c
	@mkdir -p $(BIN_DIR)/$(dir $@)
	$(CC) $(CC_FLAGS) -o $(BIN_DIR)/$@ $< $(INCLUDE_FLAGS) $(LINK_FLAGS)

clean : 
	$(RM) -r $(BIN_DIR)
